https://leetcode.com/problems/sort-array-by-parity/description/
---------------------------------------------------------------------------
Approach: Two pointer approach:
Time: o(n) space: o(1)
class Solution:
    def sortArrayByParity(self, nums: List[int]) -> List[int]:
        
        i = 0 
        j = len(nums) - 1
    
        while i<j:
            if nums[i]%2 != 0 and nums[j]%2 == 0 :   #odd even
                nums[i] , nums[j] = nums[j] , nums[i]
                i+=1
                j-=1
            
            if nums[i]%2 != 0 and nums[j]%2 != 0 : #odd odd
                j -= 1
            
            if nums[i]%2 == 0 and nums[j]%2 == 0 :  #even even
                i+=1
            
            if nums[i]%2 == 0 and nums[j]%2 != 0 : #even odd
                i+=1
                j-=1
        
        return nums

------------------------------------------------------------------------
Approach : same as above


def sortArrayByParity(self, A: List[int]) -> List[int]:
    start = 0
    end = len(A)-1

    while start < end:
        if A[start] % 2 == 0:
            start += 1
        elif A[end] % 2 != 0: # to avoid not necessary swap if the end is already odd
            end -= 1
        else:
            A[start], A[end] = A[end], A[start]
    return A
            














