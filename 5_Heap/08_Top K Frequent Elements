https://leetcode.com/problems/top-k-frequent-elements/description/
-------------------------------------------------------------------------------
Approach1 : First count the frequency of the numbers using the dictionary
          Then use the minheap data structure in order to store the topk most frequent items
         Since order of elements is not important. So, directly return this heap

Time: o(nlogk) space: o(n)

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        dict1 = {}
        for num in nums:
            if num not in dict1:
                dict1[num] = 1
            else:
                dict1[num] += 1
        
        heap = []

        for num ,freq in dict1.items():
            heapq.heappush(heap,(freq,num))

            if len(heap)>k:
                heapq.heappop(heap)
        
        ans = [j for (i,j) in heap]

        return ans
        


------------------------------------------------------------------------------------
Approach2 : using sorting 
      Time: o(nlogn) space: o(n)

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        dict1 = {}
        for num in nums:
            if num not in dict1:
                dict1[num] = 1
            else:
                dict1[num] += 1
        
        sorteddict = dict(sorted(dict1.items() , key = lambda item : item[1] , reverse = True))
        finalans = [i for i in sorteddict.keys()]
        return finalans[:k]
  ------------------------------------------------------------------------------------
