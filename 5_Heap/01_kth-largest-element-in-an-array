https://leetcode.com/problems/kth-largest-element-in-an-array/
----------------------------------------------------------------------------------------
Method1 :  Using partition
Average Time : o(n)
worst case : o(n^2)

In average, this algorithm reduces the size of the problem by approximately one half after each partition, giving the recurrence T(n) = T(n/2) + O(n) with O(n) being the time for partition.
The solution is T(n) = O(n), which means we have found an average linear-time solution. 
However, in the worst case, the recurrence will become T(n) = T(n - 1) + O(n) and T(n) = O(n^2).

class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        k = len(nums) - k + 1
        partition = -1
        i = 0
        j = len(nums)  - 1
        while True:
            partition = self.partition(nums,i,j)
            if partition == k-1:
                return nums[partition]
            elif partition > k-1:
                j = partition - 1
            else:
                i = partition + 1


    
    def partition(self, nums, low, high):
        pivot_index = high
        pivot = nums[pivot_index]

        left = low
        right = high - 1

        while left <= right:
            if nums[left] < pivot:
                left += 1
            else:
                if nums[right] > pivot:
                    right -= 1
                else:
                    nums[left], nums[right] = nums[right], nums[left]
                    left += 1
                    right -= 1

        nums[left], nums[pivot_index] = nums[pivot_index], nums[left]

        return left
                

------------------------------------------------------------------------------------------------------------------------------------------------------
