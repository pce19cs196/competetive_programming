https://practice.geeksforgeeks.org/problems/number-of-ways2552/1
---------------------------------------------------------------------------------------
Recursive Solution : time : o(2^n) space:o(n)

class Solution:
    def arrangeTiles(self, N):
        return self.arrange(N)
            
        # code here
    def arrange(self,N):
        if N==0 or N == 1 or N == 2 or N == 3:
            return 1
        else:
            return self.arrange(N-1) + self.arrange(N-4)


-----------------------------------------------------------------------------------
Top down + memoization : time : o(n) space:o(n) + o(n)

class Solution:
    def arrangeTiles(self, N):
        dict1 = {}
        return self.arrange(N,dict1)
            
        # code here
    def arrange(self,N,dict1):
        if N in dict1:
            return dict1[N]
        if N==0 or N == 1 or N == 2 or N == 3:
            return 1
        else:
            dict1[N] =  self.arrange(N-1,dict1) + self.arrange(N-4,dict1)
            return dict1[N]
-------------------------------------------------------------------------------------
Bottom up approach :  time : o(n) space:o(n) + o(n)

class Solution:
    def arrangeTiles(self, N):
        tiles = [1,1,1,1]
        for i in range(4,N+1):
            tiles.append(tiles[i-1] + tiles[i-4])
        return tiles[N]
