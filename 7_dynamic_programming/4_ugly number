https://leetcode.com/problems/ugly-number-ii/
--------------------------------------------------------------------
Method1  : Brute Force :  For each number for 1 to n ,i am checking whether its prime factor is only 2,4,5
           Time : log(1) + log(2) + ... log(n) = log(n!) = log(n^n) = nlog(n)

class Solution:
    def nthUglyNumber(self, n: int) -> int:
        count = 0
        i = 1
        while count != n:
            if self.checkprimeFactor(i) :
                count +=1
            i+=1
        return i-1
    

    def checkprimeFactor(self,n):
        while n != 1 :
            if n%2 == 0:
                n//=2
            elif n%3 == 0:
                n//=3
            elif n%5 == 0:
                n//=5
            else:
                break
        if n !=1 :
            return False
        else:
            return True
-----------------------------------------------------------------------------------
Heapify : Time:o(nlogn) , space:o (n)
          In each iteration , 3 push operations : o(logn)
          Total n iterations : n*logn

import heapq as hq
class Solution:
    def nthUglyNumber(self, n: int) -> int:
        list1 = [1]
        hq.heapify(list1)
        minelement = 0
        while(n!=0):
            minelement = list1[0]
            while(len(list1)>0 and list1[0]==minelement):
                hq.heappop(list1)
            hq.heappush(list1,2*minelement)
            hq.heappush(list1,3*minelement)
            hq.heappush(list1,5*minelement)
            n -= 1
        return minelement

----------------------------------------------------------------------------------
Using DP: Not so trivial to see.
         If we look at the heap based solution . Then , we will find out that we are forced to check if duplicate 
         numbers already are present.
         So, we have two tasks at the hand : a) Avoid duplicate addition of numbers
                                              b) Min element should always be available
        So, we have used 3 pointers in order to point to the last position a particular prime factor needs to be multiplied
       We will only add min number in the list.
         Time:o(n)   space: o(n)


class Solution:
    def nthUglyNumber(self, n: int) -> int:
        p2 = 0
        p3 = 0
        p5 = 0
        ugly_num = [1]
        next_ugly = 1

        for i in range(n-1):
            next_ugly = min(2*ugly_num[p2]  , 3*ugly_num[p3]  , 5*ugly_num[p5])
            ugly_num.append(next_ugly)

            if next_ugly == 2*ugly_num[p2] :
                p2+=1

            if next_ugly == 3*ugly_num[p3] :
                p3+=1

            if next_ugly == 5*ugly_num[p5] :
                p5+=1
        
        return next_ugly
----------------------------------------------------------------------------------------

