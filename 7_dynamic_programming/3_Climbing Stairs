https://leetcode.com/problems/climbing-stairs/description/
------------------------------------------------------------------------------------------
Approach1 : Without dp.
           Eg : 4 
                1 1 1 1      --->1
                2 1 1       |
                1 2 1       |---->  4!/2!*1!     
                1 1 2       |
                2 2         -----> 4!/2!*1!

                Ans : 1 + 4!/2! + 4!/2!

class Solution:
    def climbStairs(self, n: int) -> int:
        ans = 1
        oneCount = n
        twoCount = 0
        while(True) :
            print(oneCount)
            twoCount +=1
            oneCount -=2
            if oneCount + 2*twoCount > n or oneCount<0 : break
            ans +=self.fact(oneCount+twoCount)/(self.fact(oneCount)*self.fact(twoCount))
        return int(ans)

    
    def fact(self,n):
        if n == 0:
           return 1
        res = 1
        for i in range(2, n+1):
           res = res * i
         
        return res
--------------------------------------------------------------------
Recursion:Time:o(2^n)
def recur(self,n):
        if n == 1:
            return 1
        elif n==2:
            return 2
        
        else:
            return self.recur(n-1) + self.recur(n-2)
------------------------------------------------------------------------
Top-down + memoization

class Solution:
    def climbStairs(self, n: int) -> int:
        dict1 = {}
        return self.recur(n,dict1)
    
    def recur(self,n,dict1):
        if n in dict1:
            return dict1[n]
        if n == 1:
            return 1
        elif n==2:
            return 2
        
        else:
            dict1[n] = self.recur(n-1,dict1) + self.recur(n-2,dict1)
            return dict1[n]


