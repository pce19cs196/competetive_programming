https://www.codingninjas.com/studio/problems/rod-cutting-problem_800284
Solution:
https://www.cs.uml.edu/~kdaniels/courses/ALG_503_F12/DynamicRodCutting.pdf
-----------------------------------------------------------------------------------------------
Top dowm + memoization. Time: o(n^2)  , Space: o(n) + o(n)

def cutRod(price, n):
    dict1 ={}
    return cut(price,n,dict1)

def cut(price,n,dict1):
    if n in dict1:
        return dict1[n]
    if n==0:
        return 0
    best = -99999
   
    for i in range(n):
        best = max(best,price[i]+cut(price,n-i-1,dict1))
        dict1[n] = best
    return best

------------------------------------------------------------------------------------------------
Bottom up. Time:o(n^2) space: o(n)

def cutRod(price, n):

    cost = [0 for x in range(n+1)]
    cost[0] = 0

    # Build the table in bottom up manner.
    for i in range(1, n+1):
        maxCost = -sys.maxsize-1

        for j in range(i):
            maxCost = max(maxCost, price[j] + cost[i - j - 1])

        # Contains maximum cost obtained from the rod of length 'i'.
        cost[i] = maxCost

    # Last entry conatins maximum cost obtained from the rod of length 'n'.
    return cost[n]

-----------------------------------------------------------------------------------------
