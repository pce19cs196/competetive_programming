https://leetcode.com/problems/super-egg-drop/description/
-----------------------------------------------------------------------------
Recursive
class Solution:
    def superEggDrop(self, k: int, n: int) -> int:
        return self.eggDrop(k,n)
    
    def eggDrop(self,k,n):
        if k == 1:
            return n
        if n == 1:
            return 1
        if n == 0 :
            return 0
   
        minimum = 999999
        for i in range(1,n+1):
            value = 1 + max(self.eggDrop(k-1,i-1),self.eggDrop(k,n-i))
            minimum = min(minimum,value)
        
        return minimum
-------------------------------------------------------------
Top down + memoization
class Solution:
    def superEggDrop(self, k: int, n: int) -> int:
        dict1 = {}
        return self.eggDrop(k,n,dict1)
    
    def eggDrop(self,k,n,dict1):
        if (k,n) in dict1:
            return dict1[(k,n)]
        
        if k == 1:
            return n
        if n == 1:
            return 1
        if n == 0 :
            return 0
   
        minimum = 999999
        for i in range(1,n+1):
            value = 1 + max(self.eggDrop(k-1,i-1,dict1),self.eggDrop(k,n-i,dict1))
            minimum = min(minimum,value)
            
        dict1[(k,n)] = minimum
        
        return dict1[(k,n)]
