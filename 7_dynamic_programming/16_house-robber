https://leetcode.com/problems/house-robber/
---------------------------------------------------------------
Recursive
class Solution:
    def rob(self, nums: List[int]) -> int:
        return self.Rob(nums)
    
    def Rob(self,nums):
        if len(nums) <= 2:
            return max(nums)
        return max(nums[0] + self.Rob(nums[2:]) , self.Rob(nums[1:]))

-----------------------------------------------------------------------------
Top down + memoization

class Solution:
    def rob(self, nums: List[int]) -> int:
        dict1 = {}
        index = 0
        return self.Rob(nums,0,dict1)
    
    def Rob(self,nums,index,dict1):
        if index in dict1:
            return dict1[index]
        if index == len(nums) - 1:
            return nums[-1]
        if index == len(nums) - 2:
            return max(nums[-1],nums[-2])

        dict1[index] =  max(nums[index] + self.Rob(nums,index+2,dict1) , self.Rob(nums,index+1,dict1))
        return dict1[index]

        
