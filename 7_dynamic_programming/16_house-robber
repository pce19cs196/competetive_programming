https://leetcode.com/problems/house-robber/
---------------------------------------------------------------
Recursive: Time:o(2^n) space:o(n)

class Solution:
    def rob(self, nums: List[int]) -> int:
        return self.Rob(nums)
    
    def Rob(self,nums):
        if len(nums) <= 2:
            return max(nums)
        return max(nums[0] + self.Rob(nums[2:]) , self.Rob(nums[1:]))

-----------------------------------------------------------------------------
Top down + memoization: Time:o(n) space:o(n)+o(n)

class Solution:
    def rob(self, nums: List[int]) -> int:
        dict1 = {}
        index = 0
        return self.Rob(nums,0,dict1)
    
    def Rob(self,nums,index,dict1):
        if index in dict1:
            return dict1[index]
        if index == len(nums) - 1:
            return nums[-1]
        if index == len(nums) - 2:
            return max(nums[-1],nums[-2])

        dict1[index] =  max(nums[index] + self.Rob(nums,index+2,dict1) , self.Rob(nums,index+1,dict1))
        return dict1[index]
-------------------------------------------------------------------------------------------------------------
Bottom up dp:Time:o(n) space:o(n)

class Solution:
    def rob(self, nums: List[int]) -> int:
        
        if len(nums) ==1:
            return nums[0]
        elif len(nums) == 2:
            return max(nums[0],nums[1])

        memo = [0 for i in range(len(nums))]
        memo[0] = nums[0]
        memo[1] = max(nums[0], nums[1])

        for i in range(2,len(nums)):
            memo[i] = max(memo[i-2]+ nums[i],memo[i-1])
        
        return memo[-1]
---------------------------------------------------------------------------------------------------------------
At any moment , we just require two values in order to update the current value.
Time:o(n) space:o(1)


class Solution:
    def rob(self, nums: List[int]) -> int:
        
        if len(nums) ==1:
            return nums[0]
        elif len(nums) == 2:
            return max(nums[0],nums[1])

        memo_i2 = nums[0]
        memo_i1 = max(nums[0], nums[1])

        for i in range(2,len(nums)):
            memo_i = max(memo_i2 + nums[i],memo_i1)
            memo_i2 = memo_i1
            memo_i1 = memo_i
   
        return memo_i1

        
