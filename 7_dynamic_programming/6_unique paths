https://leetcode.com/problems/unique-paths/
-------------------------------------------------------------------------
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        count = 0
        return self.uniqueP(m,n)

    def uniqueP(self,m,n):
        if m== 1 and n==1:
            return 1

        if m == 0  or n ==0:
            return 0

        return self.uniqueP(m,n-1) +self.uniqueP(m-1,n)
-------------------------------------------------------------------
Top down + memoization

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dict1={}
        return self.uniqueP(m,n,dict1)

    def uniqueP(self,m,n,dict1):
        if (m,n) in dict1:
            return dict1[(m,n)]
        if m== 1 and n==1:
            return 1

        if m == 0  or n ==0:
            return 0

        dict1[(m,n)] =  self.uniqueP(m,n-1,dict1) +self.uniqueP(m-1,n,dict1)
        return dict1[(m,n)]
-----------------------------------------------------------------------------------
Bottom up . Time:o(m*n) space: o(m*n)
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        paths = [[0 for i in range(n+1)] for j in range(m+1)]
        
        paths[m-1][n-1] = 1
        # print(paths)
        # print(paths[m-1][n-1])
        for i in reversed(range(n)):
            for j in reversed(range(m)):
                paths[j][i] += paths[j][i+1] + paths[j+1][i]
        return paths[0][0]
---------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
class Solution {
    public int uniquePaths(int cols, int rows) {
        int[][] dp = new int[rows][cols];
        
        for(int row=0;row<rows;row++)
            dp[row][0] = 1;
        
        for(int col=0;col<cols;col++)
            dp[0][col] = 1;
        
        for(int i=1;i<rows;i++)
            for(int j=1;j<cols;j++)
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
        
        return dp[rows-1][cols-1];
    }
    
   public int uniquePaths(int cols, int rows) {
        int[] cur = new int[cols];
        int[] pre = new int[cols];
        
        for(int i=0;i<cols;i++){
            pre[i] = 1;
            cur[i] = 1;            
        }
        
        for(int i=1;i<rows;i++){
            for(int j=1;j<cols;j++)
                cur[j] = cur[j-1] + pre[j];
            
            pre = cur;
        }
        
        return cur[cols-1];
    }
    
    public int uniquePaths(int cols, int rows) {
        int[] cur = new int[cols];
                
        for(int i=0;i<cols;i++)
            cur[i] = 1;            
        
        
        for(int i=1;i<rows;i++){
            for(int j=1;j<cols;j++)
                cur[j] = cur[j-1] + cur[j];
        } 
        return cur[cols-1];
    }
}
