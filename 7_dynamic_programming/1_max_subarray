Level - Medium
https://leetcode.com/problems/maximum-subarray/
---------------------------------------------------------------------------------------------
Brute force : Time : o(n^2)  space : o(1)
Lets start with index 0 . Loop through 1 to end .        Subarray : a[0....n]
Lets start with index 1 . Loop throught 2 to end         Subarray : a[1...n]

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxSum = -999999
        for i in range(len(nums)):
            sum = 0
            
            for j in range(i,len(nums)):
                sum += nums[j]
                if sum > maxSum:
                    maxSum = sum
        return maxSum
---------------------------------------------------------------------------------------------
L(i) : Maximum sum from 0 to ith index 
L(i) = max {   L(i-1) + a[i] }
           {   a[i]          }

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        list1 = []
        list1.append(nums[0])
        for i in range(1,len(nums)):
            list1.append(max(list1[i-1] + nums[i] , nums[i]))
        return max(list1)
--------------------------------------------------------------------------------
DP :Kanades algorithm 
Time : o(N) space : o(1)


class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        global_max = nums[0]
        curr_max =  nums[0]

        for i in range(1,len(nums)):
            curr_max = max(curr_max + nums[i] , nums[i])
            if  curr_max> global_max : 
                global_max = curr_max
                
        return global_max

---------------------------------------------------------------------------------


       

