https://leetcode.com/problems/merge-k-sorted-lists/description/
-------------------------------------------------------------------------------------------------------------------------------------------
Approach1 : Here we make use of divide and conquer strategy.
            Since we are dividing the list itself in half in each iteration ( similar to merge sort tree)
            So , at logk levels the tree will end.
            Work done at each level (merging) : o(n1 + n2 + n3 .... nk)
            Overall time complexity : LogK * o(n1 + n2 + n3 .... nk)
            space : o(1)
           
           
           
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if len(lists) == 0: return None
        elif len(lists) == 1 : return lists[0]
        elif len(lists) == 2 : return self.merge(lists[0], lists[1])
         
        return self.merge(self.mergeKLists(lists[0 :len(lists)//2 + 1] ),self.mergeKLists(lists[len(lists)//2 + 1 :len(lists)]))


    
    def merge(self , list1 , list2):
        dummy = curr = ListNode()

        while list1 and list2:
            if list1.val > list2.val :
                curr.next = list2
                list2 = list2.next
            else:
                curr.next = list1
                list1 = list1.next
            curr = curr.next
        
        if not list1:
            curr.next = list2
        else :
            curr.next = list1
        
        return dummy.next





















--------------------------------------------------------------------------------------------------------------------------------------------------
Approach2 : apply in place merge of two sorted lists for each of the individual lists
           Note : we will combine the result of previously obtained list with the new list
           Time : o ( (n1+n2) + (n1+n2+n3) + (n1+n2 + n3 +n4) +    (n1+n2+n3+n4......nk))
           space : o(1)
           
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        ans = None
        for i in range(0,len(lists)):
            ans = self.merge(ans, lists[i])
        return ans


    
    def merge(self , list1 , list2):
        dummy = curr = ListNode()

        while list1 and list2:
            if list1.val > list2.val :
                curr.next = list2
                list2 = list2.next
            else:
                curr.next = list1
                list1 = list1.next
            curr = curr.next
        
        if not list1:
            curr.next = list2
        else :
            curr.next = list1
        
        return dummy.next
