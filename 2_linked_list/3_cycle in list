https://leetcode.com/problems/linked-list-cycle-ii/


Approach1 : use set to store the addresses
Time : o(n) , space : o(1)


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if(head == None):
            return None
        addr_set = set()
        addr_set.add(head)
        while head.next not in addr_set:
            if(head.next == None):
                return  None
            
            addr_set.add(head.next)
            head = head.next
        return head.next

Approach 2 : using floyd cycle detection algorithm
           time : o(n) , space : o(1)
           

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slowptr = head
        fastptr = head

        while fastptr and fastptr.next:
            slowptr = slowptr.next
            fastptr = fastptr.next.next
            if(slowptr == fastptr):break
        else:
            return None
        while(head!=slowptr):
            slowptr , head = slowptr.next , head.next
        return head
            

