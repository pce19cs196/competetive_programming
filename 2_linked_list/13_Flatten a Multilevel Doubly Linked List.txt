https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/description/

---------------------------------------------------------------------------------------------------------------------------------------------------------
Approach1 : Store the addresses of next node in the list wherever we encounter a child node
            After storing the addresses in the list, reach the end of last child node.
            Start merging rest of the nodes using the list of stored addresses.  Similar to using stack
            
            Time : o(n)  space: o(n) --> every alternate node is child node
            
            
"""
# Definition for a Node.
class Node:
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""

class Solution:
    def flatten(self, head: 'Optional[Node]') -> 'Optional[Node]':
        temp = head
        addr = []
        prev = None
        while temp  :
            if temp.child != None:
                if temp.next:
                    addr.append(temp.next)
                temp1 = temp
                temp = temp.child
                temp1.child = None
                temp1.next = temp
                temp.prev = temp1
                continue
            prev = temp
            temp = temp.next

        for i in reversed(range(len(addr))):
            prev.next = addr[i]
            prev.next.prev = prev
            prev = self.findend(addr[i])
        return head

    

    def findend(self , head: 'Optional[Node]') -> 'Optional[Node]':
        temp =head
        while temp.next:
            temp =temp.next
        return temp
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------


      
            
       


