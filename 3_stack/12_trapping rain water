https://leetcode.com/problems/trapping-rain-water/
-------------------------------------------------------------
Time : o(n) space: o(1)
Two pointer approach

arr[left] or arr[right] always is a pointer to a value which is the max value found so far, searching from left and right.

If arr[left] <= arr[right], this means that arr[right] is the max value found so far. This also means that maxLeft will be less than or equal 
to arr[right], which means that maxLeft will be bounding the addition to the answer(res variable, in this solution), since it has be less than or 
equal to arr[right] e, so we don't have to consider maxRight when adding to the counter.

If arr[left] > arr[right] , this means at arr[left] is the max value found so far. Same thing applies as explained in the paragraph above.


class Solution:
    def trap(self, height: List[int]) -> int:
        n = len(height)
        ans = 0
        leftmax = -1
        rightmax = -1
        left = 0
        right = n -1

        while left < right:
            if height[left]  < height[right]:   #right height is greater, fix it and calculate leftmax water as it is dependent on it alone
                if height[left] >= leftmax:
                    leftmax = height[left]
              
                ans += leftmax - height[left]
                left += 1

            else:
                if height[right] >= rightmax:
                    rightmax = height[right]

                ans += rightmax - height[right]
                right -= 1
        
        return ans
        






















---------------------------------------------------------------------
Refer copy:
-------------------------------------------------------------
https://ibb.co/RBHt8CT

-----------------------------------------------------------
Time: o(n)  space: o(n)
Approach : In stack , store the indices in decreasing order of height
check 22 part of stack

class Solution:
    def trap(self, height: List[int]) -> int:
        stack = []
        storedwater = 0

        for i in range(len(height)):
            if not stack : 
                stack.append(i)
                continue
            
            while height[stack[-1]] < height[i]:              // Keep popping until current height is less than top
                temp = stack.pop()
                if not stack:
                    break
                              // distance b/w leftmost and rightmost            // leftmostheight will be top // righmostheight will be current  // subtracting the height for which i am calculating height
                distance = (i - stack[-1] - 1)                       *                (min(height[stack[-1]]      ,height[i]) -                            height[temp])
                storedwater += distance
            
            stack.append(i)
        
        return storedwater













--------------------------------------------------------------
Refer copy:
------------------------------------------------------------
Space: o(n) , time : o(n)

class Solution:
    def trap(self, height: List[int]) -> int:
        leftmost = [0 for _ in range(len(height))]
        rightmost = [0 for _ in range(len(height))]

        leftmost[0] = height[0]
        rightmost[-1] = height[-1]

        for i in range(1,len(height)):
            leftmost[i] = max(leftmost[i-1], height[i])
        
        for i in range(len(height)-2 , -1 , -1):
            rightmost[i] = max(rightmost[i+1], height[i])
        
        storedwater = 0
        
        for i in range(len(height)):
            storedwater += (min(leftmost[i],rightmost[i]) - height[i])
        
        return storedwater
