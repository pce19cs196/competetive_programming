https://leetcode.com/problems/asteroid-collision/description/
--------------------------------------------------------------------------------
Two pointer approach
Time:o(n) space: o(1)





















--------------------------------------------------------------------------------------------------------
Using stack: https://leetcode.com/problems/asteroid-collision/solutions/904281/c-code-with-explanation-beats-95-in-runtime/
Refer below solution
Time: o(n) , space: o(n)

class Solution:
    def asteroidCollision(self, asteroids: List[int]) -> List[int]:

        stack = []

        for i in asteroids:
            if not stack or i >0:
                stack.append(i)
                continue

            while stack and stack[-1] > 0 and abs(i) > stack[-1]  :
                stack.pop()
            
            if stack and abs(i) == stack[-1]:
                stack.pop()
            else:
                if not stack or stack[-1] < 0:
                    stack.append(i)
    
                
        return stack


















------------------------------------------------------------------------------------------------------
Approach: using stack , only need to pop out the elements when one rock is moving in the right direction and second rock is moving in the left direction
                                                                 (+ve value)                                     (-ve value)


Teacher : https://ibb.co/NTph306



Time: o(n) , space: o(n)
class Solution:
    def asteroidCollision(self, asteroids: List[int]) -> List[int]:

        stack = []

        for i in asteroids:
            stack.append(i)

            while len(stack)>1 and stack[-1] < 0 and stack[-2] > 0  :
                if abs(stack[-1]) < abs(stack[-2]):
                    stack.pop()
                elif abs(stack[-1]) == abs(stack[-2]):
                    stack.pop()
                    stack.pop()
                else:
                    temp = stack.pop()
                    stack.pop()
                    stack.append(temp)


                
        return stack
-------------------------------------------------------------------------------------------------------
