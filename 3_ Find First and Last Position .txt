Find First and Last Position of Element in Sorted Array

https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/

Time : O(logn) + O(logn)
space: o(1)

Approach: Used modified binary search twice. First time for finding out the leftmost index . Second time for finding rightmost index.

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        #left = 0 , middle = 1 , right =2
        left = -1
        right = -1
        i =0 
        j = len(nums) - 1
        mid = len(nums)//2

        while(i<=j):
            if(nums[mid] == target):
                left = mid
                j = mid -1
                mid = (i+j)//2
            elif(nums[mid] < target):
                i = mid+1
                mid = (i+j)//2
            else:
                j = mid -1
                mid = (i+j)//2
       
        i =0 
        j = len(nums) - 1
        mid = len(nums)//2



        while(i<=j):
            if(nums[mid] == target):
                right = mid
                i = mid + 1
                mid = (i+j)//2
            elif(nums[mid] < target):
                i = mid+1
                mid = (i+j)//2
            else:
                j = mid -1
                mid = (i+j)//2

        return [left,right]



            
            
