https://practice.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab
-------------------------------------------------------------------------------
Approach:
 use cases to handle if root,root.left,root.right , internal nodes


class Solution:
    def printBoundaryView(self, root):
        # Code here
        leftB =[]
        rightB= []
        leaf = []
        self.printB(root,1,leftB,rightB,leaf)
        return leftB + leaf + rightB[::-1]
    
    def printB(self,root,flag,leftB,rightB,leaf):
        if not root:
            return
        if not root.left and not root.right:
            leaf.append(root.data)
            return
        
        if flag == 1:
            leftB.append(root.data)
            self.printB(root.left,2,leftB,rightB,leaf)
            self.printB(root.right,3,leftB,rightB,leaf)
        elif flag == 2:
            leftB.append(root.data)
            if root.left:
                self.printB(root.left,2,leftB,rightB,leaf)
                self.printB(root.right,4,leftB,rightB,leaf)
            else:
                self.printB(root.right,2,leftB,rightB,leaf)
        
        elif flag == 3:
            rightB.append(root.data)
            if root.right:
                self.printB(root.left,4,leftB,rightB,leaf)
                self.printB(root.right,3,leftB,rightB,leaf)
            else:
                self.printB(root.left,3,leftB,rightB,leaf)
        else:
            self.printB(root.left,4,leftB,rightB,leaf)
            self.printB(root.right,4,leftB,rightB,leaf)
            
                
                
