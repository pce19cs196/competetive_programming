https://leetcode.com/problems/binary-tree-right-side-view/
-----------------------------------------------------------------------------------------------
Approach: level order traversal --> append only last element
Time: o(n) , space: o(h)==o(n)

---------------------------------------------------------------------------------------------
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        ans = []
        queue = [root]

        while len(queue)>0:
            children = len(queue)
            for i in range(children):
                temp = queue[0]
                if temp:
                    if i == children-1:
                        ans.append(temp.val)

                    if temp.left: queue.append(temp.left)
                    if temp.right: queue.append(temp.right)    
                queue.pop(0)    

        return ans        

------------------------------------------------------------------------------------------------------


Note : Not required solution.
Recursive solution, 
Same time and space complexity
--------------------------------------------------------------------------------
The core idea of this algorithm:

1.Each depth of the tree only select one node.
2. View depth is current size of result list.

Here is the code:



public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        rightView(root, result, 0);
        return result;
    }
    
    public void rightView(TreeNode curr, List<Integer> result, int currDepth){
        if(curr == null){
            return;
        }
        if(currDepth == result.size()){
            result.add(curr.val);
        }
        
        rightView(curr.right, result, currDepth + 1);
        rightView(curr.left, result, currDepth + 1);
        
    }
}
        
