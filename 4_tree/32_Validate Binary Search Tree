https://leetcode.com/problems/validate-binary-search-tree/description/
---------------------------------------------------------------------------------
Approach: Inorder traversal --> should give sorted array 
         Time: o(n)
         space:o(stack_height) = o(n)      //Dont store the values  in an array , rather simply compare the prev value with next value and check if in increasing order.

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        currval = -sys.maxsize
        stack = []
        while root or stack:
            while root:
                stack.append(root)
                root = root.left
            if stack:
                root = stack.pop()
                if root :
                    if root.val > currval:
                        currval = root.val 
                    else:
                        return False
                root = root.right
        
        return True

-----------------------------------------------------------------------------------------
Q: Cant i simply compare the root value with val of left child and right child?
It would be very complicated since, every element in the left subtree should be smaller than the root element and every element in the right subtree should be greater than root.

Approach: use lower and upper limit.
          Intially lower = -∞ , upper = ∞ 
          compare if root.val >lower and root.val < upper
          if true then for left child ,recursively update:  lower = lower , upper = root.val
                       for right child , recursively update : lower = root.val upper = upper
Time: o(n)  space:o(h) == o(n)



class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        return self.checkTree(root,-sys.maxsize,sys.maxsize)

    
    def checkTree(self,root,lowerValue,upperValue):
        if not root : return True
        if root.val > lowerValue and root.val < upperValue:
            return self.checkTree(root.left,lowerValue,root.val) and self.checkTree(root.right,root.val,upperValue)
        return False


-----------------------------------------------------------------------------------------------------------------------

Iterative code of above approach:

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        stack = [(root , -sys.maxsize , sys.maxsize)]

        while stack:
            temproot , lower , upper = stack.pop()
            if not temproot: continue
            value = temproot.val
            if value<=lower or value >=upper:
                return False
            stack.append((temproot.right,value,upper))
            stack.append((temproot.left,lower,value))
        
        return True
