https://leetcode.com/problems/serialize-and-deserialize-binary-tree/
-----------------------------------------------------------------------------------
Preorder+inorder-->serial
construct tree using preorder+inorder -->deserial
code will fail: duplicate elements present
-----------------------------------------------------------------------------------
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:
  

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return ""
        strData = ""
        #preorder
        stack = [root]
        while stack:
            temp = stack.pop()
            strData = strData + str(temp.val) + " "
            if temp.right: stack.append(temp.right)
            if temp.left: stack.append(temp.left)

        strData +="?"
        currNode = root
        while True:
            if currNode :
                stack.append(currNode)
                currNode = currNode.left
            elif stack:
                currNode = stack.pop()
                strData = strData + str(currNode.val) + " "
                currNode = currNode.right
            else:
                break
                 
        print(strData)
        return strData

        
        

    def deserialize(self, data):
        """Decodes your encoded data to tree  
        :type data: str
        :rtype: TreeNode
        """
        if data == "":
            return None


        order = data.split("?")

        preorder = [int(i) for i in order[0].split()]
        inorder = [int(i) for i in order[1].split()]
        print(preorder)
        print(inorder)

        # self.inorderDict = {}
        # for i,val in enumerate(inorder):
        #     self.inorderDict[val] = i
        # print(self.inorderDict)
       
        def buildTree(inorder,preorder):
            if  not preorder or not inorder:
                return None

            root = TreeNode(preorder.pop(0))

            index = inorder.index(root.val)

            root.left = buildTree(inorder[0:index],preorder)
            root.right= buildTree(inorder[index+1:],preorder)
            return root
        
        root = buildTree(inorder,preorder)
        return root

       
        
        # ls = data.split()
        # # print(ls)

        # def makeTree(ls,i):
        #     if  i>=len(ls) or ls[i] == "N":
        #         return None
        #     root = TreeNode(int(ls[i]))
        #     root.left = makeTree(ls,2*i+1)
        #     root.right = makeTree(ls,2*i+2)
        #     return root
        
        # root = makeTree(ls,0)

        # return root
        return None

        

        # root = None
        # tempPtr = root
        
        # for s in data.split():
        #     if not root:
        #         root = TreeNode(int(s))
        #         continue
        #     if s=="N":
        #         pass
        #     else:
        #         if i%2!=0:
        #             root.left = TreeNode(int(s))
        #         else:
        #             root.right


        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
