https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal
-----------------------------------------------------------------------------------------------------
with slicing
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
        return self.buildT(inorder,postorder)
    
    def buildT(self,inorder,postorder):

        if not inorder or not postorder:
            return None
        if len(inorder) == 1:
            return TreeNode(inorder[-1])
        

        Tree = TreeNode(postorder[-1])
        index = inorder.index(postorder[-1])

        Tree.left = self.buildT(inorder[:index],postorder[:index])
        Tree.right = self.buildT(inorder[index+1:],postorder[index:len(postorder)-1])

        return Tree
----------------------------------------------------------------------------------
without slicing
class Solution {
   
    public:
        TreeNode* tree(vector<int>& inorder, int inLow, int inHigh, vector<int>& postorder, int poLow, int poHigh)
    {
        // check the base condition to return
        if (inLow>inHigh || poLow>poHigh) return nullptr;
        
        // root node is always last element of post order
        TreeNode* root = new TreeNode(postorder[poHigh]);
        
        int inIndex = inLow;
            
        while(inorder[inIndex] != root->val) inIndex++;
        
        int countLeftElement = inIndex-inLow;
        
        root->left = tree(inorder, inLow, inIndex-1, postorder, poLow, poLow+countLeftElement-1);
        root->right = tree(inorder, inIndex+1, inHigh, postorder, poLow+countLeftElement, poHigh-1);
        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return tree(inorder, 0, (inorder.size()-1), postorder, 0, (postorder.size()-1));
    }
};
        
